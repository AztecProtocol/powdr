namespace main(8);
    col witness _operation_id;
    col witness _sigma;
    col fixed _romgen_first_step = [1] + [0]*;
    main._sigma' = ((1 - main._romgen_first_step') * (main._sigma + main.instr_return));
    (main._sigma * (main._operation_id - 7)) = 0;
    col witness pc;
    col witness X;
    col witness Y;
    col witness reg_write_X_A;
    col witness reg_write_Y_A;
    col witness A;
    col witness instr_incr;
    (main.instr_incr * (main.Y - (main.X + 1))) = 0;
    col witness instr_decr;
    (main.instr_decr * (main.Y - (main.X - 1))) = 0;
    col witness instr_assert_zero;
    (main.instr_assert_zero * main.X) = 0;
    col witness instr__jump_to_operation;
    col witness instr__reset;
    col witness instr__loop;
    col witness instr_return;
    col witness X_read_free;
    col witness read_X_A;
    main.X = ((main.read_X_A * main.A) + (main.X_read_free * main.X_free_value));
    col witness Y_read_free;
    main.Y = (main.Y_read_free * main.Y_free_value);
    col fixed first_step = [1] + [0]*;
    main.A' = (((main.reg_write_X_A * main.X) + (main.reg_write_Y_A * main.Y)) + ((1 - ((main.reg_write_X_A + main.reg_write_Y_A) + main.instr__reset)) * main.A));
    col pc_update = (((main.instr__jump_to_operation * main._operation_id) + (main.instr__loop * main.pc)) + ((1 - ((main.instr__jump_to_operation + main.instr__loop) + main.instr_return)) * (main.pc + 1)));
    main.pc' = ((1 - main.first_step') * main.pc_update);
    col fixed p_line = [0, 1, 2, 3, 4, 5, 6, 7];
    col witness X_free_value(i) query match main.pc { 2 => ("input", 0), };
    col witness Y_free_value(i) query match main.pc {  };
    col fixed p_X_read_free = [0, 0, 1, 0, 0, 0, 0, 0];
    col fixed p_Y_read_free = [0, 0, 0, 1, 1, 0, 0, 0];
    col fixed p_instr__jump_to_operation = [0, 1, 0, 0, 0, 0, 0, 0];
    col fixed p_instr__loop = [0, 0, 0, 0, 0, 0, 0, 1];
    col fixed p_instr__reset = [1, 0, 0, 0, 0, 0, 0, 0];
    col fixed p_instr_assert_zero = [0, 0, 0, 0, 0, 1, 0, 0];
    col fixed p_instr_decr = [0, 0, 0, 0, 1, 0, 0, 0];
    col fixed p_instr_incr = [0, 0, 0, 1, 0, 0, 0, 0];
    col fixed p_instr_return = [0, 0, 0, 0, 0, 0, 1, 0];
    col fixed p_read_X_A = [0, 0, 0, 1, 1, 1, 0, 0];
    col fixed p_reg_write_X_A = [0, 0, 1, 0, 0, 0, 0, 0];
    col fixed p_reg_write_Y_A = [0, 0, 0, 1, 1, 0, 0, 0];
    { main.pc, main.reg_write_X_A, main.reg_write_Y_A, main.instr_incr, main.instr_decr, main.instr_assert_zero, main.instr__jump_to_operation, main.instr__reset, main.instr__loop, main.instr_return, main.X_read_free, main.read_X_A, main.Y_read_free } in { main.p_line, main.p_reg_write_X_A, main.p_reg_write_Y_A, main.p_instr_incr, main.p_instr_decr, main.p_instr_assert_zero, main.p_instr__jump_to_operation, main.p_instr__reset, main.p_instr__loop, main.p_instr_return, main.p_X_read_free, main.p_read_X_A, main.p_Y_read_free };
    col fixed _block_enforcer_last_step = [0]* + [1];
    col witness _operation_id_no_change;
    main._operation_id_no_change = ((1 - main._block_enforcer_last_step) * (1 - main.instr_return));
    (main._operation_id_no_change * (main._operation_id' - main._operation_id)) = 0;
    col fixed _linker_first_step = [1] + [0]*;
    (main._linker_first_step * (main._operation_id - 2)) = 0;
    (main._linker_first_step * (main._operation_id - 2)) = 0;
