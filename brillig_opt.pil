namespace main(256);
    col witness XInv;
    col witness XIsZero;
    main.XIsZero = (1 - (main.X * main.XInv));
    (main.XIsZero * main.X) = 0;
    (main.XIsZero * (1 - main.XIsZero)) = 0;
    col witness m_addr;
    col witness m_step;
    col witness m_change;
    col witness m_value;
    col witness m_op;
    col witness m_is_write;
    col witness m_is_read;
    col fixed POSITIVE(i) { (i + 1) };
    col fixed FIRST = [1] + [0]*;
    col fixed LAST(i) { main.FIRST((i + 1)) };
    col fixed STEP(i) { i };
    (main.m_change * (1 - main.m_change)) = 0;
    ((main.m_addr' - main.m_addr) * (1 - main.m_change)) = 0;
    (1 - main.LAST) { ((main.m_change * (main.m_addr' - main.m_addr)) + ((1 - main.m_change) * (main.m_step' - main.m_step))) } in { main.POSITIVE };
    (main.m_op * (1 - main.m_op)) = 0;
    (main.m_is_write * (1 - main.m_is_write)) = 0;
    (main.m_is_read * (1 - main.m_is_read)) = 0;
    (main.m_is_write * (1 - main.m_op)) = 0;
    (main.m_is_read * (1 - main.m_op)) = 0;
    (main.m_is_read * main.m_is_write) = 0;
    (((1 - main.m_is_write') * (1 - main.m_change)) * (main.m_value' - main.m_value)) = 0;
    (((1 - main.m_is_write') * main.m_change) * main.m_value') = 0;
    col witness _operation_id;
    col witness _sigma;
    col fixed _romgen_first_step = [1] + [0]*;
    main._sigma' = ((1 - main._romgen_first_step') * (main._sigma + main.instr_return));
    (main._sigma * (main._operation_id - 8)) = 0;
    col witness pc;
    col witness X;
    col witness Y;
    col witness Z;
    col witness jump_ptr;
    col witness addr;
    col witness tmp;
    col witness r0;
    col witness r1;
    col witness reg_write_X_r2;
    col witness r2;
    col witness reg_write_X_r3;
    col witness r3;
    col witness r4;
    col witness r5;
    col witness r6;
    col witness r7;
    col witness r8;
    col witness r9;
    col witness r10;
    col witness r11;
    0 { main.addr, main.STEP, main.X } is main.m_is_write { main.m_addr, main.m_step, main.m_value };
    0 { main.addr, main.STEP, main.X } is main.m_is_read { main.m_addr, main.m_step, main.m_value };
    col witness instr_mov;
    (main.instr_mov * (main.X - main.Y)) = 0;
    col witness instr_call;
    col witness instr_call_param_l;
    col witness instr_ret;
    col instr_jumpi_pc_update = 0;
    col instr_jumpi_pc_update_1 = (main.XIsZero * (main.pc + 1));
    col instr_jumpni_pc_update = 0;
    col instr_jumpni_pc_update_1 = ((1 - main.XIsZero) * (main.pc + 1));
    col witness instr__jump_to_operation;
    col witness instr__reset;
    col witness instr__loop;
    col witness instr_return;
    col witness X_const;
    col witness X_read_free;
    main.X = (main.X_const + (main.X_read_free * main.X_free_value));
    col witness read_Y_r4;
    main.Y = (main.read_Y_r4 * main.r4);
    main.Z = 0;
    col fixed first_step = [1] + [0]*;
    main.addr' = ((1 - main.instr__reset) * main.addr);
    main.jump_ptr' = ((main.instr_call * (main.pc + 1)) + ((1 - (main.instr_call + main.instr__reset)) * main.jump_ptr));
    col pc_update = (((((main.instr_call * main.instr_call_param_l) + (main.instr_ret * main.jump_ptr)) + (main.instr__jump_to_operation * main._operation_id)) + (main.instr__loop * main.pc)) + ((1 - ((((main.instr_call + main.instr_ret) + main.instr__jump_to_operation) + main.instr__loop) + main.instr_return)) * (main.pc + 1)));
    main.pc' = ((1 - main.first_step') * main.pc_update);
    main.r0' = ((1 - main.instr__reset) * main.r0);
    main.r1' = ((1 - main.instr__reset) * main.r1);
    main.r10' = ((1 - main.instr__reset) * main.r10);
    main.r11' = ((1 - main.instr__reset) * main.r11);
    main.r2' = ((main.reg_write_X_r2 * main.X) + ((1 - (main.reg_write_X_r2 + main.instr__reset)) * main.r2));
    main.r3' = ((main.reg_write_X_r3 * main.X) + ((1 - (main.reg_write_X_r3 + main.instr__reset)) * main.r3));
    main.r4' = ((1 - main.instr__reset) * main.r4);
    main.r5' = ((1 - main.instr__reset) * main.r5);
    main.r6' = ((1 - main.instr__reset) * main.r6);
    main.r7' = ((1 - main.instr__reset) * main.r7);
    main.r8' = ((1 - main.instr__reset) * main.r8);
    main.r9' = ((1 - main.instr__reset) * main.r9);
    main.tmp' = ((1 - main.instr__reset) * main.tmp);
    col fixed p_line = [0, 1, 2, 3, 4, 5, 6, 7, 8] + [8]*;
    col witness X_free_value(i) query match main.pc {  };
    col witness Y_free_value(i) query match main.pc {  };
    col witness Z_free_value(i) query match main.pc {  };
    col fixed p_X_const = [0, 0, 0, 3, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_X_read_free = [0, 0, 0, 0, 1, 1, 0, 0, 0] + [0]*;
    col fixed p_instr__jump_to_operation = [0, 1, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_instr__loop = [0, 0, 0, 0, 0, 0, 0, 0, 1] + [1]*;
    col fixed p_instr__reset = [1, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_instr_call = [0, 0, 1, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_instr_call_param_l = [0, 0, 3, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_instr_mov = [0, 0, 0, 0, 1, 1, 0, 0, 0] + [0]*;
    col fixed p_instr_ret = [0, 0, 0, 0, 0, 0, 1, 0, 0] + [0]*;
    col fixed p_instr_return = [0, 0, 0, 0, 0, 0, 0, 1, 0] + [0]*;
    col fixed p_read_Y_r4 = [0, 0, 0, 0, 1, 1, 0, 0, 0] + [0]*;
    col fixed p_reg_write_X_r2 = [0, 0, 0, 0, 0, 1, 0, 0, 0] + [0]*;
    col fixed p_reg_write_X_r3 = [0, 0, 0, 1, 1, 0, 0, 0, 0] + [0]*;
    { main.pc, main.reg_write_X_r2, main.reg_write_X_r3, main.instr_mov, main.instr_call, main.instr_call_param_l, main.instr_ret, main.instr__jump_to_operation, main.instr__reset, main.instr__loop, main.instr_return, main.X_const, main.X_read_free, main.read_Y_r4 } in { main.p_line, main.p_reg_write_X_r2, main.p_reg_write_X_r3, main.p_instr_mov, main.p_instr_call, main.p_instr_call_param_l, main.p_instr_ret, main.p_instr__jump_to_operation, main.p_instr__reset, main.p_instr__loop, main.p_instr_return, main.p_X_const, main.p_X_read_free, main.p_read_Y_r4 };
    col fixed _block_enforcer_last_step = [0]* + [1];
    col witness _operation_id_no_change;
    main._operation_id_no_change = ((1 - main._block_enforcer_last_step) * (1 - main.instr_return));
    (main._operation_id_no_change * (main._operation_id' - main._operation_id)) = 0;
    col fixed _linker_first_step = [1] + [0]*;
    (main._linker_first_step * (main._operation_id - 2)) = 0;
    { main.pc, main.reg_write_X_r2, main.reg_write_X_r3, main.instr_mov, main.instr_call, main.instr_call_param_l, main.instr_ret, main.instr__jump_to_operation, main.instr__reset, main.instr__loop, main.instr_return, main.X_const, main.X_read_free, main.read_Y_r4 } in { main.p_line, main.p_reg_write_X_r2, main.p_reg_write_X_r3, main.p_instr_mov, main.p_instr_call, main.p_instr_call_param_l, main.p_instr_ret, main.p_instr__jump_to_operation, main.p_instr__reset, main.p_instr__loop, main.p_instr_return, main.p_X_const, main.p_X_read_free, main.p_read_Y_r4 };
    main._operation_id_no_change = ((1 - main._block_enforcer_last_step) * (1 - main.instr_return));
    (main._operation_id_no_change * (main._operation_id' - main._operation_id)) = 0;
    (main._linker_first_step * (main._operation_id - 2)) = 0;
