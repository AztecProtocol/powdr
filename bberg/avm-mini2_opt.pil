namespace main(256);
    col fixed STEP(i) { i };
    col witness m_addr;
    col witness m_step;
    col witness m_value;
    col witness m_is_write;
    col witness _operation_id(i) query ("hint", 4);
    col witness pc;
    col witness Ta;
    col witness Tb;
    col witness Tc;
    col witness X;
    col witness reg_write_Ta_Ia;
    col witness reg_write_Tb_Ia;
    col witness reg_write_Tc_Ia;
    col witness reg_write_X_Ia;
    col witness Ia;
    col witness reg_write_Ta_Ib;
    col witness reg_write_Tb_Ib;
    col witness reg_write_Tc_Ib;
    col witness reg_write_X_Ib;
    col witness Ib;
    col witness reg_write_Ta_Ic;
    col witness reg_write_Tb_Ic;
    col witness reg_write_Tc_Ic;
    col witness reg_write_X_Ic;
    col witness Ic;
    col witness reg_write_Ta_addr;
    col witness reg_write_Tb_addr;
    col witness reg_write_Tc_addr;
    col witness reg_write_X_addr;
    col witness addr;
    col witness instr_store;
    main.instr_store { main.addr, main.STEP, main.X } is main.m_is_write { main.m_addr, main.m_step, main.m_value };
    col witness instr__jump_to_operation;
    col witness instr__reset;
    col witness instr__loop;
    col witness instr_return;
    col witness Ta_const;
    col witness Ta_read_free;
    col witness read_Ta_Ia;
    col witness read_Ta_Ib;
    col witness read_Ta_Ic;
    col witness read_Ta_addr;
    col witness read_Ta_pc;
    main.Ta = (((((((main.read_Ta_Ia * main.Ia) + (main.read_Ta_Ib * main.Ib)) + (main.read_Ta_Ic * main.Ic)) + (main.read_Ta_addr * main.addr)) + (main.read_Ta_pc * main.pc)) + main.Ta_const) + (main.Ta_read_free * main.Ta_free_value));
    col witness Tb_const;
    col witness Tb_read_free;
    col witness read_Tb_Ia;
    col witness read_Tb_Ib;
    col witness read_Tb_Ic;
    col witness read_Tb_addr;
    col witness read_Tb_pc;
    main.Tb = (((((((main.read_Tb_Ia * main.Ia) + (main.read_Tb_Ib * main.Ib)) + (main.read_Tb_Ic * main.Ic)) + (main.read_Tb_addr * main.addr)) + (main.read_Tb_pc * main.pc)) + main.Tb_const) + (main.Tb_read_free * main.Tb_free_value));
    col witness Tc_const;
    col witness Tc_read_free;
    col witness read_Tc_Ia;
    col witness read_Tc_Ib;
    col witness read_Tc_Ic;
    col witness read_Tc_addr;
    col witness read_Tc_pc;
    main.Tc = (((((((main.read_Tc_Ia * main.Ia) + (main.read_Tc_Ib * main.Ib)) + (main.read_Tc_Ic * main.Ic)) + (main.read_Tc_addr * main.addr)) + (main.read_Tc_pc * main.pc)) + main.Tc_const) + (main.Tc_read_free * main.Tc_free_value));
    col witness X_const;
    col witness X_read_free;
    col witness read_X_Ia;
    col witness read_X_Ib;
    col witness read_X_Ic;
    col witness read_X_addr;
    col witness read_X_pc;
    main.X = (((((((main.read_X_Ia * main.Ia) + (main.read_X_Ib * main.Ib)) + (main.read_X_Ic * main.Ic)) + (main.read_X_addr * main.addr)) + (main.read_X_pc * main.pc)) + main.X_const) + (main.X_read_free * main.X_free_value));
    col fixed first_step = [1] + [0]*;
    main.Ia' = ((((((main.reg_write_Ta_Ia * main.Ta) + (main.reg_write_Tb_Ia * main.Tb)) + (main.reg_write_Tc_Ia * main.Tc)) + (main.reg_write_X_Ia * main.X)) + (main.instr__reset * 0)) + ((1 - ((((main.reg_write_Ta_Ia + main.reg_write_Tb_Ia) + main.reg_write_Tc_Ia) + main.reg_write_X_Ia) + main.instr__reset)) * main.Ia));
    main.Ib' = ((((((main.reg_write_Ta_Ib * main.Ta) + (main.reg_write_Tb_Ib * main.Tb)) + (main.reg_write_Tc_Ib * main.Tc)) + (main.reg_write_X_Ib * main.X)) + (main.instr__reset * 0)) + ((1 - ((((main.reg_write_Ta_Ib + main.reg_write_Tb_Ib) + main.reg_write_Tc_Ib) + main.reg_write_X_Ib) + main.instr__reset)) * main.Ib));
    main.Ic' = ((((((main.reg_write_Ta_Ic * main.Ta) + (main.reg_write_Tb_Ic * main.Tb)) + (main.reg_write_Tc_Ic * main.Tc)) + (main.reg_write_X_Ic * main.X)) + (main.instr__reset * 0)) + ((1 - ((((main.reg_write_Ta_Ic + main.reg_write_Tb_Ic) + main.reg_write_Tc_Ic) + main.reg_write_X_Ic) + main.instr__reset)) * main.Ic));
    main.addr' = ((((((main.reg_write_Ta_addr * main.Ta) + (main.reg_write_Tb_addr * main.Tb)) + (main.reg_write_Tc_addr * main.Tc)) + (main.reg_write_X_addr * main.X)) + (main.instr__reset * 0)) + ((1 - ((((main.reg_write_Ta_addr + main.reg_write_Tb_addr) + main.reg_write_Tc_addr) + main.reg_write_X_addr) + main.instr__reset)) * main.addr));
    col pc_update = ((((main.instr__jump_to_operation * main._operation_id) + (main.instr__loop * main.pc)) + (main.instr_return * 0)) + ((1 - ((main.instr__jump_to_operation + main.instr__loop) + main.instr_return)) * (main.pc + 1)));
    main.pc' = ((1 - main.first_step') * main.pc_update);
    col fixed p_line = [0, 1, 2, 3, 4] + [4]*;
    col witness Ta_free_value(i) query match main.pc {  };
    col witness Tb_free_value(i) query match main.pc {  };
    col witness Tc_free_value(i) query match main.pc {  };
    col witness X_free_value(i) query match main.pc {  };
    col fixed p_Ta_const = [0, 0, 0, 0, 0] + [0]*;
    col fixed p_Ta_read_free = [0, 0, 0, 0, 0] + [0]*;
    col fixed p_Tb_const = [0, 0, 0, 0, 0] + [0]*;
    col fixed p_Tb_read_free = [0, 0, 0, 0, 0] + [0]*;
    col fixed p_Tc_const = [0, 0, 0, 0, 0] + [0]*;
    col fixed p_Tc_read_free = [0, 0, 0, 0, 0] + [0]*;
    col fixed p_X_const = [0, 0, 0, 1, 0] + [0]*;
    col fixed p_X_read_free = [0, 0, 0, 0, 0] + [0]*;
    col fixed p_instr__jump_to_operation = [0, 1, 0, 0, 0] + [0]*;
    col fixed p_instr__loop = [0, 0, 0, 0, 1] + [1]*;
    col fixed p_instr__reset = [1, 0, 0, 0, 0] + [0]*;
    col fixed p_instr_return = [0, 0, 0, 0, 0] + [0]*;
    col fixed p_instr_store = [0, 0, 0, 1, 0] + [0]*;
    col fixed p_read_Ta_Ia = [0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Ta_Ib = [0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Ta_Ic = [0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Ta_addr = [0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Ta_pc = [0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Tb_Ia = [0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Tb_Ib = [0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Tb_Ic = [0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Tb_addr = [0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Tb_pc = [0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Tc_Ia = [0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Tc_Ib = [0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Tc_Ic = [0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Tc_addr = [0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Tc_pc = [0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_X_Ia = [0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_X_Ib = [0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_X_Ic = [0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_X_addr = [0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_X_pc = [0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Ta_Ia = [0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Ta_Ib = [0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Ta_Ic = [0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Ta_addr = [0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Tb_Ia = [0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Tb_Ib = [0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Tb_Ic = [0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Tb_addr = [0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Tc_Ia = [0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Tc_Ib = [0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Tc_Ic = [0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Tc_addr = [0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_X_Ia = [0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_X_Ib = [0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_X_Ic = [0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_X_addr = [0, 0, 1, 0, 0] + [0]*;
    { main.pc, main.reg_write_Ta_Ia, main.reg_write_Tb_Ia, main.reg_write_Tc_Ia, main.reg_write_X_Ia, main.reg_write_Ta_Ib, main.reg_write_Tb_Ib, main.reg_write_Tc_Ib, main.reg_write_X_Ib, main.reg_write_Ta_Ic, main.reg_write_Tb_Ic, main.reg_write_Tc_Ic, main.reg_write_X_Ic, main.reg_write_Ta_addr, main.reg_write_Tb_addr, main.reg_write_Tc_addr, main.reg_write_X_addr, main.instr_store, main.instr__jump_to_operation, main.instr__reset, main.instr__loop, main.instr_return, main.Ta_const, main.Ta_read_free, main.read_Ta_Ia, main.read_Ta_Ib, main.read_Ta_Ic, main.read_Ta_addr, main.read_Ta_pc, main.Tb_const, main.Tb_read_free, main.read_Tb_Ia, main.read_Tb_Ib, main.read_Tb_Ic, main.read_Tb_addr, main.read_Tb_pc, main.Tc_const, main.Tc_read_free, main.read_Tc_Ia, main.read_Tc_Ib, main.read_Tc_Ic, main.read_Tc_addr, main.read_Tc_pc, main.X_const, main.X_read_free, main.read_X_Ia, main.read_X_Ib, main.read_X_Ic, main.read_X_addr, main.read_X_pc } in { main.p_line, main.p_reg_write_Ta_Ia, main.p_reg_write_Tb_Ia, main.p_reg_write_Tc_Ia, main.p_reg_write_X_Ia, main.p_reg_write_Ta_Ib, main.p_reg_write_Tb_Ib, main.p_reg_write_Tc_Ib, main.p_reg_write_X_Ib, main.p_reg_write_Ta_Ic, main.p_reg_write_Tb_Ic, main.p_reg_write_Tc_Ic, main.p_reg_write_X_Ic, main.p_reg_write_Ta_addr, main.p_reg_write_Tb_addr, main.p_reg_write_Tc_addr, main.p_reg_write_X_addr, main.p_instr_store, main.p_instr__jump_to_operation, main.p_instr__reset, main.p_instr__loop, main.p_instr_return, main.p_Ta_const, main.p_Ta_read_free, main.p_read_Ta_Ia, main.p_read_Ta_Ib, main.p_read_Ta_Ic, main.p_read_Ta_addr, main.p_read_Ta_pc, main.p_Tb_const, main.p_Tb_read_free, main.p_read_Tb_Ia, main.p_read_Tb_Ib, main.p_read_Tb_Ic, main.p_read_Tb_addr, main.p_read_Tb_pc, main.p_Tc_const, main.p_Tc_read_free, main.p_read_Tc_Ia, main.p_read_Tc_Ib, main.p_read_Tc_Ic, main.p_read_Tc_addr, main.p_read_Tc_pc, main.p_X_const, main.p_X_read_free, main.p_read_X_Ia, main.p_read_X_Ib, main.p_read_X_Ic, main.p_read_X_addr, main.p_read_X_pc };
    col fixed _block_enforcer_last_step = [0]* + [1];
    col witness _operation_id_no_change;
    main._operation_id_no_change = ((1 - main._block_enforcer_last_step) * (1 - main.instr_return));
    (main._operation_id_no_change * (main._operation_id' - main._operation_id)) = 0;
    col fixed _linker_first_step = [1] + [0]*;
    (main._linker_first_step * (main._operation_id - 2)) = 0;
