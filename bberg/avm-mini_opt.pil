namespace main(256);
    col fixed clk(i) { i };
    col fixed positive(i) { (i + 1) };
    col fixed first = [1] + [0]*;
    col fixed last(i) { main.FIRST((i + 1)) };
    col witness subop;
    (main.subop * (1 - main.subop)) = 0;
    ((main.reg_idx * (1 - main.reg_idx)) * (2 - main.reg_idx)) = 0;
    col witness m_clk;
    col witness m_addr;
    col witness m_val;
    col witness m_lastAccess;
    col witness m_rw;
    (main.m_lastAccess * (1 - main.m_lastAccess)) = 0;
    (main.m_rw * (1 - main.m_rw)) = 0;
    ((1 - main.m_lastAccess) * (main.m_addr' - main.m_addr)) = 0;
    { (main.m_lastAccess * (main.m_addr' - main.m_addr)) } in { main.positive };
    (((1 - main.m_lastAccess) * (1 - main.m_rw')) * (main.m_val' - main.m_val)) = 0;
    (((1 - main.reg_idx) * (2 - main.reg_idx)) * (main.Imem - main.Ia)) = 0;
    ((main.reg_idx * (2 - main.reg_idx)) * (main.Imem - main.Ib)) = 0;
    ((main.reg_idx * (1 - main.reg_idx)) * (main.Imem - main.Ic)) = 0;
    col witness _operation_id(i) query ("hint", 8);
    col witness pc;
    col witness Ta;
    col witness Tb;
    col witness Tc;
    col witness reg_write_Ta_Ia;
    col witness reg_write_Tb_Ia;
    col witness reg_write_Tc_Ia;
    col witness Ia;
    col witness reg_write_Ta_Ib;
    col witness reg_write_Tb_Ib;
    col witness reg_write_Tc_Ib;
    col witness Ib;
    col witness reg_write_Ta_Ic;
    col witness reg_write_Tb_Ic;
    col witness reg_write_Tc_Ic;
    col witness Ic;
    col witness Imem;
    col witness reg_write_Imem_tmp;
    col witness reg_write_Ta_tmp;
    col witness reg_write_Tb_tmp;
    col witness reg_write_Tc_tmp;
    col witness tmp;
    col witness reg_idx;
    col witness reg_write_Imem_mem_idx;
    col witness reg_write_Ta_mem_idx;
    col witness reg_write_Tb_mem_idx;
    col witness reg_write_Tc_mem_idx;
    col witness reg_write_reg_idx_mem_idx;
    col witness mem_idx;
    col witness instr_add;
    (main.instr_add * (main.Tc - (main.Ta + main.Tb))) = 0;
    col witness instr_load;
    main.instr_load { main.mem_idx, main.clk, main.Imem } is (1 - main.m_rw) { main.m_addr, main.m_clk, main.m_val };
    col witness instr_store;
    main.instr_store { main.mem_idx, main.clk, main.Imem } is main.m_rw { main.m_addr, main.m_clk, main.m_val };
    col witness instr_pushA;
    (main.instr_pushA * (main.Ia - main.Ta)) = 0;
    col witness instr_pushB;
    (main.instr_pushB * (main.Ib - main.Tb)) = 0;
    col witness instr_pushC;
    (main.instr_pushC * (main.Ic - main.Tc)) = 0;
    col witness instr__jump_to_operation;
    col witness instr__reset;
    col witness instr__loop;
    col witness instr_return;
    col witness Imem_const;
    col witness Imem_read_free;
    col witness read_Imem_Ia;
    col witness read_Imem_Ib;
    col witness read_Imem_Ic;
    col witness read_Imem_mem_idx;
    col witness read_Imem_tmp;
    col witness read_Imem_pc;
    main.Imem = ((((((((main.read_Imem_Ia * main.Ia) + (main.read_Imem_Ib * main.Ib)) + (main.read_Imem_Ic * main.Ic)) + (main.read_Imem_mem_idx * main.mem_idx)) + (main.read_Imem_tmp * main.tmp)) + (main.read_Imem_pc * main.pc)) + main.Imem_const) + (main.Imem_read_free * main.Imem_free_value));
    col witness Ta_const;
    col witness Ta_read_free;
    col witness read_Ta_Ia;
    col witness read_Ta_Ib;
    col witness read_Ta_Ic;
    col witness read_Ta_mem_idx;
    col witness read_Ta_tmp;
    col witness read_Ta_pc;
    main.Ta = ((((((((main.read_Ta_Ia * main.Ia) + (main.read_Ta_Ib * main.Ib)) + (main.read_Ta_Ic * main.Ic)) + (main.read_Ta_mem_idx * main.mem_idx)) + (main.read_Ta_tmp * main.tmp)) + (main.read_Ta_pc * main.pc)) + main.Ta_const) + (main.Ta_read_free * main.Ta_free_value));
    col witness Tb_const;
    col witness Tb_read_free;
    col witness read_Tb_Ia;
    col witness read_Tb_Ib;
    col witness read_Tb_Ic;
    col witness read_Tb_mem_idx;
    col witness read_Tb_tmp;
    col witness read_Tb_pc;
    main.Tb = ((((((((main.read_Tb_Ia * main.Ia) + (main.read_Tb_Ib * main.Ib)) + (main.read_Tb_Ic * main.Ic)) + (main.read_Tb_mem_idx * main.mem_idx)) + (main.read_Tb_tmp * main.tmp)) + (main.read_Tb_pc * main.pc)) + main.Tb_const) + (main.Tb_read_free * main.Tb_free_value));
    col witness Tc_const;
    col witness Tc_read_free;
    col witness read_Tc_Ia;
    col witness read_Tc_Ib;
    col witness read_Tc_Ic;
    col witness read_Tc_mem_idx;
    col witness read_Tc_tmp;
    col witness read_Tc_pc;
    main.Tc = ((((((((main.read_Tc_Ia * main.Ia) + (main.read_Tc_Ib * main.Ib)) + (main.read_Tc_Ic * main.Ic)) + (main.read_Tc_mem_idx * main.mem_idx)) + (main.read_Tc_tmp * main.tmp)) + (main.read_Tc_pc * main.pc)) + main.Tc_const) + (main.Tc_read_free * main.Tc_free_value));
    col witness reg_idx_const;
    col witness reg_idx_read_free;
    col witness read_reg_idx_Ia;
    col witness read_reg_idx_Ib;
    col witness read_reg_idx_Ic;
    col witness read_reg_idx_mem_idx;
    col witness read_reg_idx_tmp;
    col witness read_reg_idx_pc;
    main.reg_idx = ((((((((main.read_reg_idx_Ia * main.Ia) + (main.read_reg_idx_Ib * main.Ib)) + (main.read_reg_idx_Ic * main.Ic)) + (main.read_reg_idx_mem_idx * main.mem_idx)) + (main.read_reg_idx_tmp * main.tmp)) + (main.read_reg_idx_pc * main.pc)) + main.reg_idx_const) + (main.reg_idx_read_free * main.reg_idx_free_value));
    col fixed first_step = [1] + [0]*;
    main.Ia' = (((((main.reg_write_Ta_Ia * main.Ta) + (main.reg_write_Tb_Ia * main.Tb)) + (main.reg_write_Tc_Ia * main.Tc)) + (main.instr__reset * 0)) + ((1 - (((main.reg_write_Ta_Ia + main.reg_write_Tb_Ia) + main.reg_write_Tc_Ia) + main.instr__reset)) * main.Ia));
    main.Ib' = (((((main.reg_write_Ta_Ib * main.Ta) + (main.reg_write_Tb_Ib * main.Tb)) + (main.reg_write_Tc_Ib * main.Tc)) + (main.instr__reset * 0)) + ((1 - (((main.reg_write_Ta_Ib + main.reg_write_Tb_Ib) + main.reg_write_Tc_Ib) + main.instr__reset)) * main.Ib));
    main.Ic' = (((((main.reg_write_Ta_Ic * main.Ta) + (main.reg_write_Tb_Ic * main.Tb)) + (main.reg_write_Tc_Ic * main.Tc)) + (main.instr__reset * 0)) + ((1 - (((main.reg_write_Ta_Ic + main.reg_write_Tb_Ic) + main.reg_write_Tc_Ic) + main.instr__reset)) * main.Ic));
    main.mem_idx' = (((((((main.reg_write_Imem_mem_idx * main.Imem) + (main.reg_write_Ta_mem_idx * main.Ta)) + (main.reg_write_Tb_mem_idx * main.Tb)) + (main.reg_write_Tc_mem_idx * main.Tc)) + (main.reg_write_reg_idx_mem_idx * main.reg_idx)) + (main.instr__reset * 0)) + ((1 - (((((main.reg_write_Imem_mem_idx + main.reg_write_Ta_mem_idx) + main.reg_write_Tb_mem_idx) + main.reg_write_Tc_mem_idx) + main.reg_write_reg_idx_mem_idx) + main.instr__reset)) * main.mem_idx));
    col pc_update = ((((main.instr__jump_to_operation * main._operation_id) + (main.instr__loop * main.pc)) + (main.instr_return * 0)) + ((1 - ((main.instr__jump_to_operation + main.instr__loop) + main.instr_return)) * (main.pc + 1)));
    main.pc' = ((1 - main.first_step') * main.pc_update);
    main.tmp' = ((((((main.reg_write_Imem_tmp * main.Imem) + (main.reg_write_Ta_tmp * main.Ta)) + (main.reg_write_Tb_tmp * main.Tb)) + (main.reg_write_Tc_tmp * main.Tc)) + (main.instr__reset * 0)) + ((1 - ((((main.reg_write_Imem_tmp + main.reg_write_Ta_tmp) + main.reg_write_Tb_tmp) + main.reg_write_Tc_tmp) + main.instr__reset)) * main.tmp));
    col fixed p_line = [0, 1, 2, 3, 4, 5, 6, 7, 8] + [8]*;
    col witness Imem_free_value(i) query match main.pc {  };
    col witness Ta_free_value(i) query match main.pc {  };
    col witness Tb_free_value(i) query match main.pc {  };
    col witness Tc_free_value(i) query match main.pc {  };
    col witness reg_idx_free_value(i) query match main.pc {  };
    col fixed p_Imem_const = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_Imem_read_free = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_Ta_const = [0, 0, 1, 0, 0, 1, 0, 0, 0] + [0]*;
    col fixed p_Ta_read_free = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_Tb_const = [0, 0, 0, 2, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_Tb_read_free = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_Tc_const = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_Tc_read_free = [0, 0, 0, 0, 1, 0, 0, 0, 0] + [0]*;
    col fixed p_instr__jump_to_operation = [0, 1, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_instr__loop = [0, 0, 0, 0, 0, 0, 0, 0, 1] + [1]*;
    col fixed p_instr__reset = [1, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_instr_add = [0, 0, 0, 0, 1, 0, 0, 0, 0] + [0]*;
    col fixed p_instr_load = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_instr_pushA = [0, 0, 1, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_instr_pushB = [0, 0, 0, 1, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_instr_pushC = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_instr_return = [0, 0, 0, 0, 0, 0, 0, 1, 0] + [0]*;
    col fixed p_instr_store = [0, 0, 0, 0, 0, 0, 1, 0, 0] + [0]*;
    col fixed p_read_Imem_Ia = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Imem_Ib = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Imem_Ic = [0, 0, 0, 0, 0, 0, 1, 0, 0] + [0]*;
    col fixed p_read_Imem_mem_idx = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Imem_pc = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Imem_tmp = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Ta_Ia = [0, 0, 0, 0, 1, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Ta_Ib = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Ta_Ic = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Ta_mem_idx = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Ta_pc = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Ta_tmp = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Tb_Ia = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Tb_Ib = [0, 0, 0, 0, 1, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Tb_Ic = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Tb_mem_idx = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Tb_pc = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Tb_tmp = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Tc_Ia = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Tc_Ib = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Tc_Ic = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Tc_mem_idx = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Tc_pc = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Tc_tmp = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_reg_idx_Ia = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_reg_idx_Ib = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_reg_idx_Ic = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_reg_idx_mem_idx = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_reg_idx_pc = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_reg_idx_tmp = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_idx_const = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_idx_read_free = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Imem_mem_idx = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Imem_tmp = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Ta_Ia = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Ta_Ib = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Ta_Ic = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Ta_mem_idx = [0, 0, 0, 0, 0, 1, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Ta_tmp = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Tb_Ia = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Tb_Ib = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Tb_Ic = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Tb_mem_idx = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Tb_tmp = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Tc_Ia = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Tc_Ib = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Tc_Ic = [0, 0, 0, 0, 1, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Tc_mem_idx = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Tc_tmp = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_reg_idx_mem_idx = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    { main.pc, main.reg_write_Ta_Ia, main.reg_write_Tb_Ia, main.reg_write_Tc_Ia, main.reg_write_Ta_Ib, main.reg_write_Tb_Ib, main.reg_write_Tc_Ib, main.reg_write_Ta_Ic, main.reg_write_Tb_Ic, main.reg_write_Tc_Ic, main.reg_write_Imem_tmp, main.reg_write_Ta_tmp, main.reg_write_Tb_tmp, main.reg_write_Tc_tmp, main.reg_write_Imem_mem_idx, main.reg_write_Ta_mem_idx, main.reg_write_Tb_mem_idx, main.reg_write_Tc_mem_idx, main.reg_write_reg_idx_mem_idx, main.instr_add, main.instr_load, main.instr_store, main.instr_pushA, main.instr_pushB, main.instr_pushC, main.instr__jump_to_operation, main.instr__reset, main.instr__loop, main.instr_return, main.Imem_const, main.Imem_read_free, main.read_Imem_Ia, main.read_Imem_Ib, main.read_Imem_Ic, main.read_Imem_mem_idx, main.read_Imem_tmp, main.read_Imem_pc, main.Ta_const, main.Ta_read_free, main.read_Ta_Ia, main.read_Ta_Ib, main.read_Ta_Ic, main.read_Ta_mem_idx, main.read_Ta_tmp, main.read_Ta_pc, main.Tb_const, main.Tb_read_free, main.read_Tb_Ia, main.read_Tb_Ib, main.read_Tb_Ic, main.read_Tb_mem_idx, main.read_Tb_tmp, main.read_Tb_pc, main.Tc_const, main.Tc_read_free, main.read_Tc_Ia, main.read_Tc_Ib, main.read_Tc_Ic, main.read_Tc_mem_idx, main.read_Tc_tmp, main.read_Tc_pc, main.reg_idx_const, main.reg_idx_read_free, main.read_reg_idx_Ia, main.read_reg_idx_Ib, main.read_reg_idx_Ic, main.read_reg_idx_mem_idx, main.read_reg_idx_tmp, main.read_reg_idx_pc } in { main.p_line, main.p_reg_write_Ta_Ia, main.p_reg_write_Tb_Ia, main.p_reg_write_Tc_Ia, main.p_reg_write_Ta_Ib, main.p_reg_write_Tb_Ib, main.p_reg_write_Tc_Ib, main.p_reg_write_Ta_Ic, main.p_reg_write_Tb_Ic, main.p_reg_write_Tc_Ic, main.p_reg_write_Imem_tmp, main.p_reg_write_Ta_tmp, main.p_reg_write_Tb_tmp, main.p_reg_write_Tc_tmp, main.p_reg_write_Imem_mem_idx, main.p_reg_write_Ta_mem_idx, main.p_reg_write_Tb_mem_idx, main.p_reg_write_Tc_mem_idx, main.p_reg_write_reg_idx_mem_idx, main.p_instr_add, main.p_instr_load, main.p_instr_store, main.p_instr_pushA, main.p_instr_pushB, main.p_instr_pushC, main.p_instr__jump_to_operation, main.p_instr__reset, main.p_instr__loop, main.p_instr_return, main.p_Imem_const, main.p_Imem_read_free, main.p_read_Imem_Ia, main.p_read_Imem_Ib, main.p_read_Imem_Ic, main.p_read_Imem_mem_idx, main.p_read_Imem_tmp, main.p_read_Imem_pc, main.p_Ta_const, main.p_Ta_read_free, main.p_read_Ta_Ia, main.p_read_Ta_Ib, main.p_read_Ta_Ic, main.p_read_Ta_mem_idx, main.p_read_Ta_tmp, main.p_read_Ta_pc, main.p_Tb_const, main.p_Tb_read_free, main.p_read_Tb_Ia, main.p_read_Tb_Ib, main.p_read_Tb_Ic, main.p_read_Tb_mem_idx, main.p_read_Tb_tmp, main.p_read_Tb_pc, main.p_Tc_const, main.p_Tc_read_free, main.p_read_Tc_Ia, main.p_read_Tc_Ib, main.p_read_Tc_Ic, main.p_read_Tc_mem_idx, main.p_read_Tc_tmp, main.p_read_Tc_pc, main.p_reg_idx_const, main.p_reg_idx_read_free, main.p_read_reg_idx_Ia, main.p_read_reg_idx_Ib, main.p_read_reg_idx_Ic, main.p_read_reg_idx_mem_idx, main.p_read_reg_idx_tmp, main.p_read_reg_idx_pc };
    col fixed _block_enforcer_last_step = [0]* + [1];
    col witness _operation_id_no_change;
    main._operation_id_no_change = ((1 - main._block_enforcer_last_step) * (1 - main.instr_return));
    (main._operation_id_no_change * (main._operation_id' - main._operation_id)) = 0;
    col fixed _linker_first_step = [1] + [0]*;
    (main._linker_first_step * (main._operation_id - 2)) = 0;
