namespace main(256);
pol constant clk(i) { i };
pol constant positive(i) { (i + 1) };
pol constant first = [1] + [0]*;
pol constant last(i) { FIRST((i + 1)) };
pol commit subop;
(subop * (1 - subop)) = 0;
((reg_idx * (1 - reg_idx)) * (2 - reg_idx)) = 0;
pol commit m_clk;
pol commit m_addr;
pol commit m_val;
pol commit m_lastAccess;
pol commit m_rw;
(m_lastAccess * (1 - m_lastAccess)) = 0;
(m_rw * (1 - m_rw)) = 0;
((1 - m_lastAccess) * (m_addr' - m_addr)) = 0;
{ (m_lastAccess * (m_addr' - m_addr)) } in { positive };
(((1 - m_lastAccess) * (1 - m_rw')) * (m_val' - m_val)) = 0;
(((1 - reg_idx) * (2 - reg_idx)) * (Imem - Ia)) = 0;
((reg_idx * (2 - reg_idx)) * (Imem - Ib)) = 0;
((reg_idx * (1 - reg_idx)) * (Imem - Ic)) = 0;
pol commit _operation_id(i) query ("hint", 8);
pol commit pc;
pol commit Ta;
pol commit Tb;
pol commit Tc;
pol commit reg_write_Ta_Ia;
pol commit reg_write_Tb_Ia;
pol commit reg_write_Tc_Ia;
pol commit Ia;
pol commit reg_write_Ta_Ib;
pol commit reg_write_Tb_Ib;
pol commit reg_write_Tc_Ib;
pol commit Ib;
pol commit reg_write_Ta_Ic;
pol commit reg_write_Tb_Ic;
pol commit reg_write_Tc_Ic;
pol commit Ic;
pol commit Imem;
pol commit reg_write_Imem_tmp;
pol commit reg_write_Ta_tmp;
pol commit reg_write_Tb_tmp;
pol commit reg_write_Tc_tmp;
pol commit tmp;
pol commit reg_idx;
pol commit reg_write_Imem_mem_idx;
pol commit reg_write_Ta_mem_idx;
pol commit reg_write_Tb_mem_idx;
pol commit reg_write_Tc_mem_idx;
pol commit reg_write_reg_idx_mem_idx;
pol commit mem_idx;
pol commit instr_add;
(instr_add * (Tc - (Ta + Tb))) = 0;
pol commit instr_load;
instr_load { mem_idx, clk, Imem } is (1 - m_rw) { m_addr, m_clk, m_val };
pol commit instr_store;
instr_store { mem_idx, clk, Imem } is m_rw { m_addr, m_clk, m_val };
pol commit instr_pushA;
(instr_pushA * (Ia - Ta)) = 0;
pol commit instr_pushB;
(instr_pushB * (Ib - Tb)) = 0;
pol commit instr_pushC;
(instr_pushC * (Ic - Tc)) = 0;
pol commit instr__jump_to_operation;
pol commit instr__reset;
pol commit instr__loop;
pol commit instr_return;
pol commit Imem_const;
pol commit Imem_read_free;
pol commit read_Imem_Ia;
pol commit read_Imem_Ib;
pol commit read_Imem_Ic;
pol commit read_Imem_mem_idx;
pol commit read_Imem_tmp;
pol commit read_Imem_pc;
Imem = ((((((((read_Imem_Ia * Ia) + (read_Imem_Ib * Ib)) + (read_Imem_Ic * Ic)) + (read_Imem_mem_idx * mem_idx)) + (read_Imem_tmp * tmp)) + (read_Imem_pc * pc)) + Imem_const) + (Imem_read_free * Imem_free_value));
pol commit Ta_const;
pol commit Ta_read_free;
pol commit read_Ta_Ia;
pol commit read_Ta_Ib;
pol commit read_Ta_Ic;
pol commit read_Ta_mem_idx;
pol commit read_Ta_tmp;
pol commit read_Ta_pc;
Ta = ((((((((read_Ta_Ia * Ia) + (read_Ta_Ib * Ib)) + (read_Ta_Ic * Ic)) + (read_Ta_mem_idx * mem_idx)) + (read_Ta_tmp * tmp)) + (read_Ta_pc * pc)) + Ta_const) + (Ta_read_free * Ta_free_value));
pol commit Tb_const;
pol commit Tb_read_free;
pol commit read_Tb_Ia;
pol commit read_Tb_Ib;
pol commit read_Tb_Ic;
pol commit read_Tb_mem_idx;
pol commit read_Tb_tmp;
pol commit read_Tb_pc;
Tb = ((((((((read_Tb_Ia * Ia) + (read_Tb_Ib * Ib)) + (read_Tb_Ic * Ic)) + (read_Tb_mem_idx * mem_idx)) + (read_Tb_tmp * tmp)) + (read_Tb_pc * pc)) + Tb_const) + (Tb_read_free * Tb_free_value));
pol commit Tc_const;
pol commit Tc_read_free;
pol commit read_Tc_Ia;
pol commit read_Tc_Ib;
pol commit read_Tc_Ic;
pol commit read_Tc_mem_idx;
pol commit read_Tc_tmp;
pol commit read_Tc_pc;
Tc = ((((((((read_Tc_Ia * Ia) + (read_Tc_Ib * Ib)) + (read_Tc_Ic * Ic)) + (read_Tc_mem_idx * mem_idx)) + (read_Tc_tmp * tmp)) + (read_Tc_pc * pc)) + Tc_const) + (Tc_read_free * Tc_free_value));
pol commit reg_idx_const;
pol commit reg_idx_read_free;
pol commit read_reg_idx_Ia;
pol commit read_reg_idx_Ib;
pol commit read_reg_idx_Ic;
pol commit read_reg_idx_mem_idx;
pol commit read_reg_idx_tmp;
pol commit read_reg_idx_pc;
reg_idx = ((((((((read_reg_idx_Ia * Ia) + (read_reg_idx_Ib * Ib)) + (read_reg_idx_Ic * Ic)) + (read_reg_idx_mem_idx * mem_idx)) + (read_reg_idx_tmp * tmp)) + (read_reg_idx_pc * pc)) + reg_idx_const) + (reg_idx_read_free * reg_idx_free_value));
pol constant first_step = [1] + [0]*;
Ia' = (((((reg_write_Ta_Ia * Ta) + (reg_write_Tb_Ia * Tb)) + (reg_write_Tc_Ia * Tc)) + (instr__reset * 0)) + ((1 - (((reg_write_Ta_Ia + reg_write_Tb_Ia) + reg_write_Tc_Ia) + instr__reset)) * Ia));
Ib' = (((((reg_write_Ta_Ib * Ta) + (reg_write_Tb_Ib * Tb)) + (reg_write_Tc_Ib * Tc)) + (instr__reset * 0)) + ((1 - (((reg_write_Ta_Ib + reg_write_Tb_Ib) + reg_write_Tc_Ib) + instr__reset)) * Ib));
Ic' = (((((reg_write_Ta_Ic * Ta) + (reg_write_Tb_Ic * Tb)) + (reg_write_Tc_Ic * Tc)) + (instr__reset * 0)) + ((1 - (((reg_write_Ta_Ic + reg_write_Tb_Ic) + reg_write_Tc_Ic) + instr__reset)) * Ic));
mem_idx' = (((((((reg_write_Imem_mem_idx * Imem) + (reg_write_Ta_mem_idx * Ta)) + (reg_write_Tb_mem_idx * Tb)) + (reg_write_Tc_mem_idx * Tc)) + (reg_write_reg_idx_mem_idx * reg_idx)) + (instr__reset * 0)) + ((1 - (((((reg_write_Imem_mem_idx + reg_write_Ta_mem_idx) + reg_write_Tb_mem_idx) + reg_write_Tc_mem_idx) + reg_write_reg_idx_mem_idx) + instr__reset)) * mem_idx));
pol pc_update = ((((instr__jump_to_operation * _operation_id) + (instr__loop * pc)) + (instr_return * 0)) + ((1 - ((instr__jump_to_operation + instr__loop) + instr_return)) * (pc + 1)));
pc' = ((1 - first_step') * pc_update);
tmp' = ((((((reg_write_Imem_tmp * Imem) + (reg_write_Ta_tmp * Ta)) + (reg_write_Tb_tmp * Tb)) + (reg_write_Tc_tmp * Tc)) + (instr__reset * 0)) + ((1 - ((((reg_write_Imem_tmp + reg_write_Ta_tmp) + reg_write_Tb_tmp) + reg_write_Tc_tmp) + instr__reset)) * tmp));
pol constant p_line = [0, 1, 2, 3, 4, 5, 6, 7, 8] + [8]*;
pol commit Imem_free_value(i) query match pc {  };
pol commit Ta_free_value(i) query match pc {  };
pol commit Tb_free_value(i) query match pc {  };
pol commit Tc_free_value(i) query match pc {  };
pol commit reg_idx_free_value(i) query match pc {  };
pol constant p_Imem_const = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_Imem_read_free = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_Ta_const = [0, 0, 1, 0, 0, 1, 0, 0, 0] + [0]*;
pol constant p_Ta_read_free = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_Tb_const = [0, 0, 0, 2, 0, 0, 0, 0, 0] + [0]*;
pol constant p_Tb_read_free = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_Tc_const = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_Tc_read_free = [0, 0, 0, 0, 1, 0, 0, 0, 0] + [0]*;
pol constant p_instr__jump_to_operation = [0, 1, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_instr__loop = [0, 0, 0, 0, 0, 0, 0, 0, 1] + [1]*;
pol constant p_instr__reset = [1, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_instr_add = [0, 0, 0, 0, 1, 0, 0, 0, 0] + [0]*;
pol constant p_instr_load = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_instr_pushA = [0, 0, 1, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_instr_pushB = [0, 0, 0, 1, 0, 0, 0, 0, 0] + [0]*;
pol constant p_instr_pushC = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_instr_return = [0, 0, 0, 0, 0, 0, 0, 1, 0] + [0]*;
pol constant p_instr_store = [0, 0, 0, 0, 0, 0, 1, 0, 0] + [0]*;
pol constant p_read_Imem_Ia = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Imem_Ib = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Imem_Ic = [0, 0, 0, 0, 0, 0, 1, 0, 0] + [0]*;
pol constant p_read_Imem_mem_idx = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Imem_pc = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Imem_tmp = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Ta_Ia = [0, 0, 0, 0, 1, 0, 0, 0, 0] + [0]*;
pol constant p_read_Ta_Ib = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Ta_Ic = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Ta_mem_idx = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Ta_pc = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Ta_tmp = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Tb_Ia = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Tb_Ib = [0, 0, 0, 0, 1, 0, 0, 0, 0] + [0]*;
pol constant p_read_Tb_Ic = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Tb_mem_idx = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Tb_pc = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Tb_tmp = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Tc_Ia = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Tc_Ib = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Tc_Ic = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Tc_mem_idx = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Tc_pc = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Tc_tmp = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_reg_idx_Ia = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_reg_idx_Ib = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_reg_idx_Ic = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_reg_idx_mem_idx = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_reg_idx_pc = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_reg_idx_tmp = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_idx_const = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_idx_read_free = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Imem_mem_idx = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Imem_tmp = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Ta_Ia = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Ta_Ib = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Ta_Ic = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Ta_mem_idx = [0, 0, 0, 0, 0, 1, 0, 0, 0] + [0]*;
pol constant p_reg_write_Ta_tmp = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Tb_Ia = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Tb_Ib = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Tb_Ic = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Tb_mem_idx = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Tb_tmp = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Tc_Ia = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Tc_Ib = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Tc_Ic = [0, 0, 0, 0, 1, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Tc_mem_idx = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Tc_tmp = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_reg_idx_mem_idx = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
{ pc, reg_write_Ta_Ia, reg_write_Tb_Ia, reg_write_Tc_Ia, reg_write_Ta_Ib, reg_write_Tb_Ib, reg_write_Tc_Ib, reg_write_Ta_Ic, reg_write_Tb_Ic, reg_write_Tc_Ic, reg_write_Imem_tmp, reg_write_Ta_tmp, reg_write_Tb_tmp, reg_write_Tc_tmp, reg_write_Imem_mem_idx, reg_write_Ta_mem_idx, reg_write_Tb_mem_idx, reg_write_Tc_mem_idx, reg_write_reg_idx_mem_idx, instr_add, instr_load, instr_store, instr_pushA, instr_pushB, instr_pushC, instr__jump_to_operation, instr__reset, instr__loop, instr_return, Imem_const, Imem_read_free, read_Imem_Ia, read_Imem_Ib, read_Imem_Ic, read_Imem_mem_idx, read_Imem_tmp, read_Imem_pc, Ta_const, Ta_read_free, read_Ta_Ia, read_Ta_Ib, read_Ta_Ic, read_Ta_mem_idx, read_Ta_tmp, read_Ta_pc, Tb_const, Tb_read_free, read_Tb_Ia, read_Tb_Ib, read_Tb_Ic, read_Tb_mem_idx, read_Tb_tmp, read_Tb_pc, Tc_const, Tc_read_free, read_Tc_Ia, read_Tc_Ib, read_Tc_Ic, read_Tc_mem_idx, read_Tc_tmp, read_Tc_pc, reg_idx_const, reg_idx_read_free, read_reg_idx_Ia, read_reg_idx_Ib, read_reg_idx_Ic, read_reg_idx_mem_idx, read_reg_idx_tmp, read_reg_idx_pc } in { p_line, p_reg_write_Ta_Ia, p_reg_write_Tb_Ia, p_reg_write_Tc_Ia, p_reg_write_Ta_Ib, p_reg_write_Tb_Ib, p_reg_write_Tc_Ib, p_reg_write_Ta_Ic, p_reg_write_Tb_Ic, p_reg_write_Tc_Ic, p_reg_write_Imem_tmp, p_reg_write_Ta_tmp, p_reg_write_Tb_tmp, p_reg_write_Tc_tmp, p_reg_write_Imem_mem_idx, p_reg_write_Ta_mem_idx, p_reg_write_Tb_mem_idx, p_reg_write_Tc_mem_idx, p_reg_write_reg_idx_mem_idx, p_instr_add, p_instr_load, p_instr_store, p_instr_pushA, p_instr_pushB, p_instr_pushC, p_instr__jump_to_operation, p_instr__reset, p_instr__loop, p_instr_return, p_Imem_const, p_Imem_read_free, p_read_Imem_Ia, p_read_Imem_Ib, p_read_Imem_Ic, p_read_Imem_mem_idx, p_read_Imem_tmp, p_read_Imem_pc, p_Ta_const, p_Ta_read_free, p_read_Ta_Ia, p_read_Ta_Ib, p_read_Ta_Ic, p_read_Ta_mem_idx, p_read_Ta_tmp, p_read_Ta_pc, p_Tb_const, p_Tb_read_free, p_read_Tb_Ia, p_read_Tb_Ib, p_read_Tb_Ic, p_read_Tb_mem_idx, p_read_Tb_tmp, p_read_Tb_pc, p_Tc_const, p_Tc_read_free, p_read_Tc_Ia, p_read_Tc_Ib, p_read_Tc_Ic, p_read_Tc_mem_idx, p_read_Tc_tmp, p_read_Tc_pc, p_reg_idx_const, p_reg_idx_read_free, p_read_reg_idx_Ia, p_read_reg_idx_Ib, p_read_reg_idx_Ic, p_read_reg_idx_mem_idx, p_read_reg_idx_tmp, p_read_reg_idx_pc };
pol constant _block_enforcer_last_step = [0]* + [1];
pol commit _operation_id_no_change;
_operation_id_no_change = ((1 - _block_enforcer_last_step) * (1 - instr_return));
(_operation_id_no_change * (_operation_id' - _operation_id)) = 0;
pol constant _linker_first_step = [1] + [0]*;
(_linker_first_step * (_operation_id - 2)) = 0;
