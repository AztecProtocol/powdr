namespace main(256);
pol constant STEP(i) { i };
pol commit m_addr;
pol commit m_step;
pol commit m_value;
pol commit m_is_write;
pol commit _operation_id(i) query ("hint", 4);
pol commit pc;
pol commit Ta;
pol commit Tb;
pol commit Tc;
pol commit X;
pol commit reg_write_Ta_Ia;
pol commit reg_write_Tb_Ia;
pol commit reg_write_Tc_Ia;
pol commit reg_write_X_Ia;
pol commit Ia;
pol commit reg_write_Ta_Ib;
pol commit reg_write_Tb_Ib;
pol commit reg_write_Tc_Ib;
pol commit reg_write_X_Ib;
pol commit Ib;
pol commit reg_write_Ta_Ic;
pol commit reg_write_Tb_Ic;
pol commit reg_write_Tc_Ic;
pol commit reg_write_X_Ic;
pol commit Ic;
pol commit reg_write_Ta_addr;
pol commit reg_write_Tb_addr;
pol commit reg_write_Tc_addr;
pol commit reg_write_X_addr;
pol commit addr;
pol commit instr_store;
instr_store { addr, STEP, X } is m_is_write { m_addr, m_step, m_value };
pol commit instr__jump_to_operation;
pol commit instr__reset;
pol commit instr__loop;
pol commit instr_return;
pol commit Ta_const;
pol commit Ta_read_free;
pol commit read_Ta_Ia;
pol commit read_Ta_Ib;
pol commit read_Ta_Ic;
pol commit read_Ta_addr;
pol commit read_Ta_pc;
Ta = (((((((read_Ta_Ia * Ia) + (read_Ta_Ib * Ib)) + (read_Ta_Ic * Ic)) + (read_Ta_addr * addr)) + (read_Ta_pc * pc)) + Ta_const) + (Ta_read_free * Ta_free_value));
pol commit Tb_const;
pol commit Tb_read_free;
pol commit read_Tb_Ia;
pol commit read_Tb_Ib;
pol commit read_Tb_Ic;
pol commit read_Tb_addr;
pol commit read_Tb_pc;
Tb = (((((((read_Tb_Ia * Ia) + (read_Tb_Ib * Ib)) + (read_Tb_Ic * Ic)) + (read_Tb_addr * addr)) + (read_Tb_pc * pc)) + Tb_const) + (Tb_read_free * Tb_free_value));
pol commit Tc_const;
pol commit Tc_read_free;
pol commit read_Tc_Ia;
pol commit read_Tc_Ib;
pol commit read_Tc_Ic;
pol commit read_Tc_addr;
pol commit read_Tc_pc;
Tc = (((((((read_Tc_Ia * Ia) + (read_Tc_Ib * Ib)) + (read_Tc_Ic * Ic)) + (read_Tc_addr * addr)) + (read_Tc_pc * pc)) + Tc_const) + (Tc_read_free * Tc_free_value));
pol commit X_const;
pol commit X_read_free;
pol commit read_X_Ia;
pol commit read_X_Ib;
pol commit read_X_Ic;
pol commit read_X_addr;
pol commit read_X_pc;
X = (((((((read_X_Ia * Ia) + (read_X_Ib * Ib)) + (read_X_Ic * Ic)) + (read_X_addr * addr)) + (read_X_pc * pc)) + X_const) + (X_read_free * X_free_value));
pol constant first_step = [1] + [0]*;
Ia' = ((((((reg_write_Ta_Ia * Ta) + (reg_write_Tb_Ia * Tb)) + (reg_write_Tc_Ia * Tc)) + (reg_write_X_Ia * X)) + (instr__reset * 0)) + ((1 - ((((reg_write_Ta_Ia + reg_write_Tb_Ia) + reg_write_Tc_Ia) + reg_write_X_Ia) + instr__reset)) * Ia));
Ib' = ((((((reg_write_Ta_Ib * Ta) + (reg_write_Tb_Ib * Tb)) + (reg_write_Tc_Ib * Tc)) + (reg_write_X_Ib * X)) + (instr__reset * 0)) + ((1 - ((((reg_write_Ta_Ib + reg_write_Tb_Ib) + reg_write_Tc_Ib) + reg_write_X_Ib) + instr__reset)) * Ib));
Ic' = ((((((reg_write_Ta_Ic * Ta) + (reg_write_Tb_Ic * Tb)) + (reg_write_Tc_Ic * Tc)) + (reg_write_X_Ic * X)) + (instr__reset * 0)) + ((1 - ((((reg_write_Ta_Ic + reg_write_Tb_Ic) + reg_write_Tc_Ic) + reg_write_X_Ic) + instr__reset)) * Ic));
addr' = ((((((reg_write_Ta_addr * Ta) + (reg_write_Tb_addr * Tb)) + (reg_write_Tc_addr * Tc)) + (reg_write_X_addr * X)) + (instr__reset * 0)) + ((1 - ((((reg_write_Ta_addr + reg_write_Tb_addr) + reg_write_Tc_addr) + reg_write_X_addr) + instr__reset)) * addr));
pol pc_update = ((((instr__jump_to_operation * _operation_id) + (instr__loop * pc)) + (instr_return * 0)) + ((1 - ((instr__jump_to_operation + instr__loop) + instr_return)) * (pc + 1)));
pc' = ((1 - first_step') * pc_update);
pol constant p_line = [0, 1, 2, 3, 4] + [4]*;
pol commit Ta_free_value(i) query match pc {  };
pol commit Tb_free_value(i) query match pc {  };
pol commit Tc_free_value(i) query match pc {  };
pol commit X_free_value(i) query match pc {  };
pol constant p_Ta_const = [0, 0, 0, 0, 0] + [0]*;
pol constant p_Ta_read_free = [0, 0, 0, 0, 0] + [0]*;
pol constant p_Tb_const = [0, 0, 0, 0, 0] + [0]*;
pol constant p_Tb_read_free = [0, 0, 0, 0, 0] + [0]*;
pol constant p_Tc_const = [0, 0, 0, 0, 0] + [0]*;
pol constant p_Tc_read_free = [0, 0, 0, 0, 0] + [0]*;
pol constant p_X_const = [0, 0, 0, 1, 0] + [0]*;
pol constant p_X_read_free = [0, 0, 0, 0, 0] + [0]*;
pol constant p_instr__jump_to_operation = [0, 1, 0, 0, 0] + [0]*;
pol constant p_instr__loop = [0, 0, 0, 0, 1] + [1]*;
pol constant p_instr__reset = [1, 0, 0, 0, 0] + [0]*;
pol constant p_instr_return = [0, 0, 0, 0, 0] + [0]*;
pol constant p_instr_store = [0, 0, 0, 1, 0] + [0]*;
pol constant p_read_Ta_Ia = [0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Ta_Ib = [0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Ta_Ic = [0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Ta_addr = [0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Ta_pc = [0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Tb_Ia = [0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Tb_Ib = [0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Tb_Ic = [0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Tb_addr = [0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Tb_pc = [0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Tc_Ia = [0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Tc_Ib = [0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Tc_Ic = [0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Tc_addr = [0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Tc_pc = [0, 0, 0, 0, 0] + [0]*;
pol constant p_read_X_Ia = [0, 0, 0, 0, 0] + [0]*;
pol constant p_read_X_Ib = [0, 0, 0, 0, 0] + [0]*;
pol constant p_read_X_Ic = [0, 0, 0, 0, 0] + [0]*;
pol constant p_read_X_addr = [0, 0, 0, 0, 0] + [0]*;
pol constant p_read_X_pc = [0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Ta_Ia = [0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Ta_Ib = [0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Ta_Ic = [0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Ta_addr = [0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Tb_Ia = [0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Tb_Ib = [0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Tb_Ic = [0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Tb_addr = [0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Tc_Ia = [0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Tc_Ib = [0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Tc_Ic = [0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Tc_addr = [0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_X_Ia = [0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_X_Ib = [0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_X_Ic = [0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_X_addr = [0, 0, 1, 0, 0] + [0]*;
{ pc, reg_write_Ta_Ia, reg_write_Tb_Ia, reg_write_Tc_Ia, reg_write_X_Ia, reg_write_Ta_Ib, reg_write_Tb_Ib, reg_write_Tc_Ib, reg_write_X_Ib, reg_write_Ta_Ic, reg_write_Tb_Ic, reg_write_Tc_Ic, reg_write_X_Ic, reg_write_Ta_addr, reg_write_Tb_addr, reg_write_Tc_addr, reg_write_X_addr, instr_store, instr__jump_to_operation, instr__reset, instr__loop, instr_return, Ta_const, Ta_read_free, read_Ta_Ia, read_Ta_Ib, read_Ta_Ic, read_Ta_addr, read_Ta_pc, Tb_const, Tb_read_free, read_Tb_Ia, read_Tb_Ib, read_Tb_Ic, read_Tb_addr, read_Tb_pc, Tc_const, Tc_read_free, read_Tc_Ia, read_Tc_Ib, read_Tc_Ic, read_Tc_addr, read_Tc_pc, X_const, X_read_free, read_X_Ia, read_X_Ib, read_X_Ic, read_X_addr, read_X_pc } in { p_line, p_reg_write_Ta_Ia, p_reg_write_Tb_Ia, p_reg_write_Tc_Ia, p_reg_write_X_Ia, p_reg_write_Ta_Ib, p_reg_write_Tb_Ib, p_reg_write_Tc_Ib, p_reg_write_X_Ib, p_reg_write_Ta_Ic, p_reg_write_Tb_Ic, p_reg_write_Tc_Ic, p_reg_write_X_Ic, p_reg_write_Ta_addr, p_reg_write_Tb_addr, p_reg_write_Tc_addr, p_reg_write_X_addr, p_instr_store, p_instr__jump_to_operation, p_instr__reset, p_instr__loop, p_instr_return, p_Ta_const, p_Ta_read_free, p_read_Ta_Ia, p_read_Ta_Ib, p_read_Ta_Ic, p_read_Ta_addr, p_read_Ta_pc, p_Tb_const, p_Tb_read_free, p_read_Tb_Ia, p_read_Tb_Ib, p_read_Tb_Ic, p_read_Tb_addr, p_read_Tb_pc, p_Tc_const, p_Tc_read_free, p_read_Tc_Ia, p_read_Tc_Ib, p_read_Tc_Ic, p_read_Tc_addr, p_read_Tc_pc, p_X_const, p_X_read_free, p_read_X_Ia, p_read_X_Ib, p_read_X_Ic, p_read_X_addr, p_read_X_pc };
pol constant _block_enforcer_last_step = [0]* + [1];
pol commit _operation_id_no_change;
_operation_id_no_change = ((1 - _block_enforcer_last_step) * (1 - instr_return));
(_operation_id_no_change * (_operation_id' - _operation_id)) = 0;
pol constant _linker_first_step = [1] + [0]*;
(_linker_first_step * (_operation_id - 2)) = 0;
