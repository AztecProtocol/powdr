namespace Main(16);
    // Returns folder(...folder(folder(0, f(0)), f(1)) ..., f(length - 1))
    let fold = |length, f, initial, folder| match length {
        0 => initial,
        _ => folder(fold(length - 1, f, initial, folder), f(length - 1))
    };
    // returns f(0) + f(1) + ... + f(length - 1)
    let sum = |length, f| fold(length, f, 0, |acc, e| acc + e);
    // If called with a single value, this function evaluates the equality,
    // otherwise, it returns a constraint (if called with a column or
    // an algebraic expression).
    // If we write "|x| x == 20", it will be classified as a fixed column,
    // so we use a trick that makes it not look like a function with a single
    // parameter.
    let equals_twenty = [|x| x == 20][0];
    // declares an array of 16 witness columns.
    col witness wit[16];
    // This expression has to evaluate to a constraint, but we can still use
    // higher order functions and all the flexibility of the language.
    // The sub-expression "sum(16, |i| wit[i]" evaluates to the algebraic
    // expression "wit[0] + wit[1] + ... + wit[15]", which is then
    // turned by "equals_twenty" into the constraint
    // wit[0] + wit[1] + ... + wit[15] == 20.
    equals_twenty(sum(16, |i| wit[i]));

    // We constrained the sum to equal twenty, but there is no unique solution
    // to that constraint. In order to fully constrain the system, we need to
    // add something more: The first fifteen columns should all be one.

    // returns [f(0), f(1), ..., f(length - 1)]
    let make_array = |length, f| fold(length, f, [], |acc, e| acc + [e]);
    // If an expression evaluates to an array of constraints, all the
    // constraints in the array are added to the system.
    make_array(15, |i| wit[i] == 1);